var image = document.getElementById("image");
ctx = image.getContext("2d");
const img = new Image();
var masterTl = gsap.timeline();
let smallDeviceHeroSection = window.matchMedia("(max-width: 960px)");
let sequenceCount = 60;
function handleDeviceChange(e) {
  if (e.matches || 1 === ScrollTrigger.isTouch) {
    var image = document.getElementById("image"),
      ctx = image.getContext("2d"),
      imgelink = "./assets/integra-magna-landing-sequence/00";
    const images = [];
    for (let i = 1; i <= sequenceCount; i++) {
      const img = new Image();
      img.src = imgelink + i + ".webp";
      images.push(img);
    }
    ctx.drawImage(images[0], 0, 0, image.width, image.height);
    let imageIndex = 0;
    let direction = 1; // 1 for forward, -1 for backward
    function autoplay() {
      // Update imageIndex based on the current direction
      imageIndex += direction;
      // Reverse direction if at the start or end of the image array
      if (imageIndex === images.length - 1 || imageIndex === 0) {
        direction *= -1;
      }
      // Clear the canvas and draw the next image with easing
      gsap.to(
        {},
        {
          duration: 0.04, // Duration of the transition
          ease: "power1.inOut", // Ease function
          onUpdate: () => {
            ctx.clearRect(0, 0, image.width, image.height);
            ctx.drawImage(images[imageIndex], 0, 0, image.width, image.height);
          },
          onComplete: () => {
            // Call autoplay again after a delay
            gsap.delayedCall(0.005, autoplay);
          },
        }
      );
    }
    // Start the autoplay function initially
    autoplay();
  } else {
    var image = document.getElementById("image"),
      ctx = image.getContext("2d"),
      imgelink = "./assets/integra-magna-landing-sequence/00";
    const imgarray = [];
    for (var i = 1; i <= 60; i++) imgarray.push(imgelink + i + ".webp");
    const images = [];
    for (let i = 1; i <= 60; i++) {
      const img = new Image();
      (img.src = imgelink + i + ".webp"), images.push(img);
    }
    ctx.drawImage(images[0], 0, 0, image.width, image.height),
      (window.onmousemove = function (event) {
        var image_index;
        event = event || window.event;
        image.getBoundingClientRect(),
          image.getBoundingClientRect().left,
          window.scrollX,
          image.getBoundingClientRect().top,
          window.scrollY;
        var x = event.clientX / self.innerWidth,
          y = event.clientY / self.innerWidth;
        (image_index = Math.round(59 * x.toFixed(2))),
          gsap.to(image, { rotation: -30 * (y - 0.25), duration: 0.1 }),
          gsap.to(image, {
            opacity: 1,
            duration: 0.2,
            onComplete: function () {
              ctx.clearRect(0, 0, image.width, image.height),
                ctx.drawImage(
                  images[image_index],
                  0,
                  0,
                  image.width,
                  image.height
                ),
                gsap.to(image, { opacity: 1, duration: 0.3 });
            },
          });
      });
  }
}
gsap.registerPlugin(ScrollTrigger),
  smallDeviceHeroSection.addListener(handleDeviceChange),
  (img.src = "./assets/integra-magna-landing-sequence/0030.webp"),
  ctx.drawImage(img, 0, 0, image.width, image.height),
  handleDeviceChange(smallDeviceHeroSection);
var factor =
  "scale(" + mapValue(0, 0.7, 1) + ")translateY(" + mapValue(0, -2, 0) + "%)";
$(".video_container").css("transform", factor);
const screenWidth = window.innerWidth;
if (screenWidth >= 960) {
  function applyAnimation(progress) {
    var factor =
      "scale(" +
      mapValue(progress, 0.7, 1) +
      ")translateY(" +
      mapValue(progress, -2, 0) +
      "%)";
    $(".video_container").css("transform", factor);
  }
  gsap.from(".video_container", {
    scrollTrigger: {
      trigger: "",
      start: "top top",
      end: () => `+=${document.querySelector(".video_container").offsetHeight}`,
      scrub: 1,
      type: "wheel, drag",
      pin: !0,
      onUpdate: (self) => applyAnimation(self.progress),
      invalidateOnRefresh: !0,
    },
  }),
    "loading" !== document.readyState && screenWidth >= 960
      ? us_customDOMChanges()
      : document.addEventListener("DOMContentLoaded", us_customDOMChanges);
} else
  gsap.set(".video_container", {
    scale: 1,
    y: "0",
    transformOrigin: "top center",
  });
function mapValue(input, output_min, output_max) {
  return ((input - 0) / 1) * (output_max - output_min) + output_min;
}
function us_customDOMChanges() {
  const customCursor = document.querySelector(".custom-cursor");
  document.addEventListener("mousemove", (e) => {
    var left = e.clientX - 100,
      top = e.clientY - 100;
    (customCursor.style.left = `${left}px`),
      (customCursor.style.top = `${top}px`)
      // (customCursor.style.mixBlendMode = "difference");
  });
  const sectionSelect = document.querySelector(".video-section");
  sectionSelect.addEventListener("mousemove", (e) => {}),
    sectionSelect.addEventListener("mouseenter", () => {
      (customCursor.style.visibility = "visible"),
        (customCursor.style.opacity = "1");
    }),
    sectionSelect.addEventListener("mouseleave", () => {
      (customCursor.style.visibility = "hidden"),
        (customCursor.style.opacity = "0");
    });
}
window.addEventListener("resize", applyAnimation);
var TxtType = function (el, toRotate, period, colors) {
  (this.toRotate = toRotate),
    (this.colors = colors),
    (this.el = el),
    (this.loopNum = 0),
    (this.period = parseInt(period, 10) || 2e3),
    (this.txt = ""),
    this.tick(),
    (this.isDeleting = !1);
};
function scrollimage_changing() {
  const canvas = document.getElementById("team-image-changing"),
    context = canvas.getContext("2d");
  (canvas.width = innerWidth), (canvas.height = (9 * innerWidth) / 16);
  const images = [],
    airpods = { frame: 0 };
  for (let i = 0; i < 46; i++) {
    const img = new Image();
    (img.src = `./assets/scrolling-team-working/0${(i + 1)
      .toString()
      .padStart(0, "0")}.webp`),
      images.push(img);
  }
  images[0].onload = render;
  if (window.innerWidth >= 960) {
    let canvas_container_height = $(".canvas-container");
    function render() {
      let renderWidth = canvas.width,
        renderHeight = canvas.height;
      (renderWidth = canvas.height * (16 / 9)), (renderHeight = canvas.height);
      const x = (canvas.width - renderWidth) / 2,
        y = (canvas.height - renderHeight) / 2;
      context.clearRect(0, 0, canvas.width, canvas.height),
        context.drawImage(
          images[airpods.frame],
          x,
          y,
          renderWidth,
          renderHeight
        );
    }
    $(".canvas-container").css(
      "margin-top",
      10 - canvas_container_height[0].clientHeight
    ),
      gsap.to(airpods, {
        frame: 45,
        snap: "frame",
        ease: "none",
        scrollTrigger: {
          trigger: ".canvas-container",
          start: "top top",
          end: "+=" + 2 * window.innerHeight,
          pin: !0,
          scrub: 0.5,
        },
        onUpdate: render,
      }),
      (images[0].onload = render);
  } else {
    $(".canvas-container");
    function render() {
      let renderWidth = canvas.width,
        renderHeight = canvas.height;
      (renderWidth = canvas.height * (16 / 9)), (renderHeight = canvas.height);
      const x = (canvas.width - renderWidth) / 2,
        y = (canvas.height - renderHeight) / 2;
      context.clearRect(0, 0, canvas.width, canvas.height),
        context.drawImage(
          images[airpods.frame],
          x,
          y,
          renderWidth,
          renderHeight
        );
    }
    gsap.to(airpods, {
      frame: 45,
      snap: "frame",
      ease: "none",
      scrollTrigger: {
        trigger: ".canvas-container",
        start: "top bottom",
        end: "bottom top",
        scrub: 0.5,
      },
      onUpdate: render,
    }),
      (images[0].onload = render);
  }
}
function landingServiceFunction(x) {
  if (x.matches) {
    const cards = gsap.utils.toArray(".s-desc"),
      s_t_heading = $(".s-holder-small-display .s-t-heading").eq(0);
    var card_s = $(".s-holder-small-display .s-desc"),
      card_s_h = [];
    for (let i = 0; i < card_s.length; i++)
      card_s_h.push(
        document.querySelectorAll(".s-holder-small-display .s-desc")[i]
          .clientHeight
      );
    let card_s_h_max = Math.max(...card_s_h);
    cards.forEach((card) => {
      ScrollTrigger.create({
        trigger: card,
        start: `top ${2 * s_t_heading.height() + $(".header").height() + 50}`,
        pin: !0,
        pinSpacing: !1,
        id: "pin",
        endTrigger: ".s-holder-small-display",
        end: `bottom ${
          s_t_heading.height() + card_s_h_max + $(".header").height() + 10
        }`,
        invalidateOnRefresh: !0,
      });
    });
    const s_desc = $(".s-holder-small-display .s-desc");
    for (let index = 0; index < s_desc.length; index++)
      s_desc.eq(index).height();
    ScrollTrigger.create({
      trigger: s_t_heading,
      pin: !0,
      pinSpacing: !1,
      scrub: !0,
      startTrigger: ".s-desc-container",
      start: `top ${s_t_heading.height() + $(".header").height() + 50}`,
      endTrigger: ".s-holder-small-display",
      end: `bottom ${
        s_t_heading.height() + card_s_h_max + $(".header").height()
      }`,
    });
  } else
    gsap.utils.toArray(".s-desc"),
      gsap.timeline({
        scrollTrigger: {
          trigger: ".s-title-c-image",
          pin: !0,
          startTrigger: ".s-desc-container",
          start: "top 20%",
          endTrigger: ".s-desc-container",
          end: "bottom 20%",
          invalidateOnRefresh: !0,
        },
      });
}
(TxtType.prototype.tick = function () {
  var i = this.loopNum % this.toRotate.length,
    fullTxt = this.toRotate[i];
  this.isDeleting
    ? (this.txt = fullTxt.substring(0, this.txt.length - 1))
    : (this.txt = fullTxt.substring(0, this.txt.length + 1));
  var colorIndex = i % this.colors.length;
  (this.el.style.color = this.colors[colorIndex]),
    (this.el.innerHTML = '<span class="wrap">' + this.txt + "</span>");
  var that = this,
    delta = 200 - 100 * Math.random();
  this.isDeleting && (delta /= 2),
    this.isDeleting || this.txt !== fullTxt
      ? this.isDeleting &&
        "" === this.txt &&
        ((this.isDeleting = !1), this.loopNum++, (delta = 500))
      : ((delta = this.period), (this.isDeleting = !0)),
    setTimeout(function () {
      that.tick();
    }, delta);
}),
  document.addEventListener("DOMContentLoaded", function () {
    for (
      var elements = document.getElementsByClassName("typewrite"), i = 0;
      i < elements.length;
      i++
    ) {
      var toRotate = elements[i].getAttribute("data-type"),
        period = elements[i].getAttribute("data-period"),
        colors = JSON.parse(elements[i].getAttribute("data-color"));
      toRotate &&
        new TxtType(elements[i], JSON.parse(toRotate), period, colors);
    }
    var css = document.createElement("style");
    (css.type = "text/css"),
      (css.innerHTML = ".typewrite > .wrap { border-right: 0.08em solid #101820}"),
      document.body.appendChild(css);
  }),
  scrollimage_changing();
var x = window.matchMedia("(max-width: 960px)");
function initEmptySlide() {
  $(".container")[0].getClientRects()[0].x;
}
landingServiceFunction(x);
let slidermobile = window.matchMedia("(max-width: 960px)"),
  sliderdesktop = window.matchMedia("(min-width: 960px)");
if ("mouse" === window.DetectIt.primaryInput)
  function testionialCursor() {
    const customCursor = document.querySelector(".arrow-button-container");
    document
      .querySelector(".slider_report")
      .addEventListener("mousemove", (e) => {
        var left = e.clientX - $(".arrow-button-container").eq(0).width() / 2,
          top = e.clientY - $(".arrow-button-container").eq(0).width() / 2;
        (customCursor.style.left = `${left}px`),
          (customCursor.style.top = `${top}px`),
          $(".prev").eq(0).css("display", "block");
      });
    const sectionSelect = document.querySelector(".slick-slider");
    sectionSelect.addEventListener("mousemove", () => {}),
      sectionSelect.addEventListener("mouseenter", () => {
        (customCursor.style.visibility = "visible"),
          (customCursor.style.opacity = "1");
      }),
      sectionSelect.addEventListener("mouseleave", () => {
        (customCursor.style.visibility = "hidden"),
          (customCursor.style.opacity = "0");
      });
  }
function y_openPopup() {
  $("#youtube-player").attr("src", $("#youtube-player").data("src")),
    $(".y-reel-popup").css("display", "block"),
    $(".y-reel-popup").css("opacity", "1");
}
function y_closePopup() {
  $(".y-reel-popup").css("display", "none"),
    $(".y-reel-popup").css("opacity", "0"),
    $("#youtube-player").attr("src", "");
}
if (
  ($(window).resize(function () {
    initEmptySlide();
  }),
  slidermobile.matches
    ? $(document).on("ready", function () {
        $(".variable").slick({
          dots: !1,
          focusOnSelect: !1,
          infinite: !1,
          variableWidth: !1,
          slidesToShow: 1.1,
          slidesToScroll: 1,
          centerPadding: "0px",
          speed: 500,
          easing: "ease-in-out",
        });
      })
    : sliderdesktop.matches &&
      $(document).on("ready", function () {
        $(".variable").slick({
          dots: !1,
          focusOnSelect: !1,
          infinite: !1,
          variableWidth: !1,
          slidesToShow: 2.3,
          slidesToScroll: 1,
          speed: 500,
          easing: "ease-in-out",
          gap: 50,
        });
      }),
  "loading" !== document.readyState
    ? testionialCursor()
    : document.addEventListener("DOMContentLoaded", testionialCursor),
  screenWidth >= 640)
) {
  const fontWeightItems = $("[data-animate=font-weight]"),
    maxDistance = 300,
    maxFontWeight = 200,
    minFontWeight = 500;
  fontWeightItems.each((index, item) => {
    let splitChars;
    if (
      ($(item).attr("data-cursor", "-lg"), 0 === $(item).find(".char").length)
    ) {
      splitChars = new SplitType(item, {
        types: "chars,words",
        tagName: "span",
      }).chars;
    } else splitChars = $(item).find(".char");
    $(splitChars).each((index, char) => {
      $(char).data("initialWeight", parseInt($(char).css("font-weight"))),
        $(char).on("mouseenter", () => {
          gsap
            .timeline()
            .to(char, { fontWeight: maxFontWeight, duration: 0.5 });
        }),
        $(char).on("mouseleave", () => {
          gsap.timeline().to(char, {
            fontWeight: $(char).data("initialWeight"),
            duration: 0.5,
          });
        });
    });
  }),
    $(document).mousemove(function (event) {
      const mouseX = event.pageX,
        mouseY = event.pageY;
      fontWeightItems.find(".char").each((index, item) => {
        const itemPosition = $(item).offset(),
          itemWidth = $(item).outerWidth(),
          itemHeight = $(item).outerHeight(),
          itemCenterX = itemPosition.left + itemWidth / 2,
          itemCenterY = itemPosition.top + itemHeight / 2,
          distance = Math.sqrt(
            Math.pow(mouseX - itemCenterX, 2) +
              Math.pow(mouseY - itemCenterY, 2)
          );
        let fontWeight = minFontWeight;
        if (distance < maxDistance) {
          fontWeight =
            minFontWeight +
            (maxFontWeight - minFontWeight) *
              ((maxDistance - distance) / maxDistance);
        }
        gsap.to(item, { fontWeight: fontWeight, duration: 0.5 });
      });
    });
}
var divedetailarrow = gsap.timeline({
  scrollTrigger: {
    trigger: "#divedetailarrow",
    start: "top bottom",
    end: "bottom top",
    scrub: 0.5,
  },
});
divedetailarrow.to("#divedetailarrow", { y: "-60%" });
