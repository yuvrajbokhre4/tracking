const screenWidth = window.innerWidth; if (screenWidth >= 640) { const fontWeightItems = $("[data-animate=font-weight]"), maxDistance = 300, maxFontWeight = 200, minFontWeight = 500; fontWeightItems.each(((index, item) => { let splitChars; if ($(item).attr("data-cursor", "-lg"), 0 === $(item).find(".char").length) { const splitCharType = new SplitType(item, { types: "chars,words" }); splitChars = $(splitCharType.chars) } else splitChars = $(item).find(".char"); splitChars.each(((charIndex, charItem) => { const className = `char-${charIndex}-${$(charItem).text().replace(/[^a-zA-Z0-9]/g, "")}`; $(charItem).addClass(className) })), $(document).mousemove((function (event) { const mouseX = event.pageX, mouseY = event.pageY; fontWeightItems.find(".char").each(((index, item) => { const itemPosition = $(item).offset(), itemWidth = $(item).outerWidth(), itemHeight = $(item).outerHeight(), itemCenterX = itemPosition.left + itemWidth / 2, itemCenterY = itemPosition.top + itemHeight / 2, distance = Math.sqrt(Math.pow(mouseX - itemCenterX, 2) + Math.pow(mouseY - itemCenterY, 2)); let fontWeight = minFontWeight; if (distance < maxDistance) { fontWeight = minFontWeight + (maxFontWeight - minFontWeight) * ((maxDistance - distance) / maxDistance) } gsap.to(item, { fontWeight: fontWeight, duration: .5 }) })) })) })) } function debounce(func, wait, immediate) { let timeout; return function () { const context = this, args = arguments, callNow = immediate && !timeout; clearTimeout(timeout), timeout = setTimeout((function () { timeout = null, immediate || func.apply(context, args) }), wait), callNow && func.apply(context, args) } } document.addEventListener("DOMContentLoaded", (() => { const marquee = document.querySelector(".c-textMarquee"); let tween; if (marquee) { gsap.set(marquee.children, { autoAlpha: 0 }); let duration = (window.innerWidth, 5); const playMarquee = () => { let progress = tween ? tween.progress() : 0; const translateWidth = marquee.querySelectorAll(".c-textMarquee__text")[0].getBoundingClientRect().width; duration = Math.max(.5, duration), tween && tween.kill(), tween = gsap.fromTo(marquee.children, { x: 0, autoAlpha: 1 }, { x: -translateWidth, duration: duration, ease: "none", repeat: -1, paused: !1 }), tween.progress(progress) }, debouncedPlayMarquee = debounce(playMarquee, 500); playMarquee(), window.addEventListener("orientationchange", (() => { window.matchMedia("(orientation: landscape)").matches && window.innerHeight, playMarquee() })), window.addEventListener("resize", debouncedPlayMarquee) } }));